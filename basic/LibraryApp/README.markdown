# Структура проекта

Проект будет следовать принципам ООП и разделён на несколько классов для чёткой организации кода. Вот структура:

```
LibraryManagementSystem/
├── src/
│   ├── Book.java              // Класс для представления книги
│   ├── User.java              // Класс для представления пользователя
│   ├── Library.java           // Класс для управления библиотекой (логика приложения)
│   ├── LibraryApp.java        // Главный класс с консольным интерфейсом
```

## Описание классов

1. **Book**: Представляет книгу с атрибутами (ID, название, автор, доступность).
2. **User**: Представляет пользователя с атрибутами (ID, имя).
3. **Library**: Основная логика приложения, управляет списками книг и пользователей, а также выдачей/возвратом книг.
4. **LibraryApp**: Класс для взаимодействия с пользователем через консольное меню.

## Подробное описание классов и методов

### 1. Класс Book

**Назначение**: Хранит информацию о книге (ID, название, автор, статус доступности).

**Атрибуты**:

- `id` (int): Уникальный идентификатор книги.
- `title` (String): Название книги.
- `author` (String): Автор книги.
- `isAvailable` (boolean): Доступна ли книга для выдачи.

**Методы**:

- Конструктор: Создаёт объект книги.
- Геттеры и сеттеры: Для доступа к атрибутам.
- `toString()`: Для вывода информации о книге в читаемом виде.

**Как работает**:

- Книга создаётся с уникальным ID, названием и автором.
- Статус `isAvailable` меняется, когда книгу берут или возвращают.
- Метод `toString()` используется для вывода информации о книге в консоль.

### 2. Класс User

**Назначение**: Хранит информацию о пользователе (ID, имя).

**Атрибуты**:

- `id` (int): Уникальный идентификатор пользователя.
- `name` (String): Имя пользователя.

**Методы**:

- Конструктор: Создаёт объект пользователя.
- Геттеры: Для доступа к атрибутам.
- `toString()`: Для вывода информации о пользователе.

**Как работает**:

- Пользователь создаётся с уникальным ID и именем.
- Метод `toString()` используется для вывода информации о пользователе в консоль.

### 3. Класс Library

**Назначение**: Реализует основную логику приложения: управление книгами, пользователями и выдачей/возвратом книг.

**Атрибуты**:

- `books` (List<Book>): Список всех книг.
- `users` (List<User>): Список всех пользователей.
- `borrowedBooks` (Map<Integer, Integer>): Карта, связывающая ID пользователя с ID книги, которую он взял.

**Методы**:

- `addBook(Book book)`: Добавляет книгу в библиотеку.
- `removeBook(int bookId)`: Удаляет книгу по ID.
- `findBooksByTitle(String title)`: Ищет книги по названию (частично или полностью).
- `findBooksByAuthor(String author)`: Ищет книги по автору.
- `addUser(User user)`: Добавляет пользователя.
- `removeUser(int userId)`: Удаляет пользователя.
- `borrowBook(int userId, int bookId)`: Выдаёт книгу пользователю.
- `returnBook(int bookId)`: Возвращает книгу в библиотеку.
- `getAllBooks()`: Возвращает список всех книг.
- `getAllUsers()`: Возвращает список всех пользователей.
- `getBorrowedBooks()`: Возвращает список выданных книг.

**Как работает**:

- Использует ArrayList для хранения книг и пользователей, HashMap для учёта выданных книг (ключ — ID пользователя, значение — ID книги).
- Методы `findBooksByTitle` и `findBooksByAuthor` используют Stream API для поиска с игнорированием регистра.
- Проверяет, что книга доступна и пользователь существует перед выдачей.
- Проверяет, что книга взята перед возвратом.

### 4. Класс LibraryApp

**Назначение**: Реализует консольный интерфейс для взаимодействия с пользователем.

**Атрибуты**:

- `library` (Library): Экземпляр библиотеки.
- `scanner` (Scanner): Для чтения ввода пользователя.

**Методы**:

- `main(String[] args)`: Точка входа, запускает цикл меню.
- `showMenu()`: Выводит меню в консоль.
- `handleMenu(int choice)`: Обрабатывает выбор пользователя.
- Методы для обработки конкретных действий: `addBook()`, `removeBook()`, `findBooks()`, и т.д.

**Как работает**:

- Метод `run()` запускает бесконечный цикл с меню.
- `showMenu()` выводит список доступных действий.
- `handleMenu(int choice)` вызывает соответствующий метод в зависимости от выбора пользователя.
- Методы вроде `addBook()`, `borrowBook()` запрашивают данные у пользователя через Scanner и вызывают методы класса Library.
- `getIntInput` обрабатывает ввод чисел с проверкой на ошибки.